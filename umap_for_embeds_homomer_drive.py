# -*- coding: utf-8 -*-
"""UMAP_for_embeds_Homomer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17ax57zmq16kxZukM_BFUh21RCgrFjpQD

Load data
"""

!pip uninstall umap
!pip install umap-learn
import umap.umap_ as umap
reducer = umap.UMAP(verbose=True)

import re
import os
import requests
from tqdm.auto import tqdm
import pickle 
import numpy as np 
# import umap.umap_ as umap
import itertools
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd


from google.colab import drive
drive.mount("/content/drive")

# with open("parsed_tab_for_embed.pkl", 'rb') as f:
with open("drive/MyDrive/OrlyPred/Homomer_embeds/results/embeds_Mar_22/parsed_tab_for_embed.pkl", 'rb') as f:
  full_tab_for_embed = pickle.load(f)
print(full_tab_for_embed)

# need to remove rows with None in fasta (those are superceeded pdbs)
# TODO - verify that indeed all of them are like this (455 out of 141k)
tab_for_embed = full_tab_for_embed[full_tab_for_embed['fasta'].notnull()]
tab_for_embed.reset_index(inplace=True)

fas_len = tab_for_embed.fasta.apply(len)
#fas_len[fas_len>=1000].hist(bins=100)
fas_len.hist(bins=100)

# tab_for_embed = tab_for_embed.loc[fas_len[fas_len<2100].index]

!ls drive/MyDrive/OrlyPred/Homomer_embeds/results/embeds_Jan_22

with open("drive/MyDrive/OrlyPred/Homomer_embeds/results/embeds_Mar_22/embed_pkl_final_all","rb") as f:
    npy_embed_all = pickle.load(f)

filt_npy_embed_all = npy_embed_all[1:]
print(filt_npy_embed_all.shape)

# tab_test = tab_for_embed.head(30001)
tab_test = tab_for_embed
k=tab_test[tab_test.nsub!=1.0].nsub
print(tab_test[tab_test.nsub!=1.0].nsub)
print(tab_test.nsub)

"""PCA"""

filt_npy_embed_all

embed_df = pd.DataFrame(filt_npy_embed_all)
embed_df

from sklearn.preprocessing import StandardScaler
x = StandardScaler().fit_transform(embed_df)
x

from sklearn.decomposition import PCA
pca = PCA(n_components=100)
principalComponents = pca.fit_transform(pd.DataFrame(x))
# principalDf = pd.DataFrame(data = principalComponents, columns = ['pc1', 'pc2'])
principalDf = pd.DataFrame(data = principalComponents)

cluster_tab = pd.read_csv("drive/MyDrive/OrlyPred/Homomer_embeds/early_runs_notebooks_and_results/results/clustering_cov0.3/session_cluster.tsv", sep='\t', header=None)
cluster_tab.rename(columns={0: "representative", 1: "code"}, inplace=True)
cluster_tab.drop_duplicates(subset=['representative','code'], inplace=True)
cluster_tab

finalDf = pd.concat([principalDf, tab_for_embed[['nsub', "code"]]], axis=1)
finalDf

finalDf_clust = pd.merge(finalDf, cluster_tab, on="code")

finalDf_rep = finalDf_clust.drop_duplicates(subset="representative", keep="first")

fig = plt.figure(figsize = (8,8))
ax = fig.add_subplot(1,1,1, projection='3d') 
ax.set_xlabel('pc1', fontsize = 15)
ax.set_ylabel('pc2', fontsize = 15)
ax.set_title('2_component_PCA', fontsize = 20)
targets = set(tab_for_embed['nsub'].to_list())
colors = ['r', 'g', 'b']
# colors = ['r', 'g', 'b', 'c', 'm', 'y', 'k', 'w', "brown", 'pink', 'gray', 'purple', 'orange', 'indigo', 'teal', 'peru', 'lightgreen', 'tan', 'lime']
for target, color in zip(targets,colors):
    indicesToKeep = finalDf_rep['nsub'] == target
    ax.scatter(finalDf_rep.loc[indicesToKeep, 0]
               , finalDf_rep.loc[indicesToKeep, 1], finalDf_rep.loc[indicesToKeep, 2]
               , c = color
               , s = 20, alpha=0.2)
ax.legend(targets)
ax.grid()





"""Unsupervised UMAP"""

reducer = umap.UMAP(verbose=True,n_components=64,n_neighbors=200,
    min_dist=0.5)
umap_embeds = reducer.fit_transform(x)
umap_embeds.shape

type(filt_npy_embed_all[0])
filt_npy_embed_all[0]

fig = plt.figure()
ax = fig.add_subplot(projection='3d')
ax.legend()
c_palette=sns.color_palette(n_colors=64)


ax.scatter(
    umap_embeds[:, 20],
    umap_embeds[:, 24],
    umap_embeds[:, 52],


    c=[c_palette[int(x)] for x in tab_test.nsub]
    )

    # c=[c_palette[int(x)] for x in k])

# import plotly.express as px

# def enable_plotly_in_cell():
#   import IPython
#   from plotly.offline import init_notebook_mode
#   display(IPython.core.display.HTML('''<script src="/static/components/requirejs/require.js"></script>'''))
#   init_notebook_mode(connected=False)

# enable_plotly_in_cell()
# # fig = px.scatter_3d(umap_embeds, 
# #     x=umap_embeds[:, 50],
# #     y=umap_embeds[:, 1],
# #     z=umap_embeds[:, 10],
# #     # x=np.arange(1,100,1),
# #     # y=np.arange(101,200,1),
# #     # z=np.arange(1001,1100,1)
# #     color=tab_test.nsub
# #     )
# # fig.show(renderer="colab")

# df = px.data.iris()
# fig = px.scatter_3d(df, x='sepal_length', y='sepal_width', z='petal_width',
#               color='species')
# fig.show()

"""Supervised UMAP"""

# 
s_reducer = umap.UMAP(verbose=True,n_components=64,n_neighbors=200,
    min_dist=0.5)
s_umap_embeds = s_reducer.fit_transform(filt_npy_embed_all,y=finalDf.nsub)
s_umap_embeds.shape
# with open(("drive/MyDrive/OrlyPred/Homomer_embeds/results/embeds_Jan_22/all_supervised_umap_embeds"), 'wb') as f:
#     pickle.dump(s_umap_embeds, f)

s_umap_embeds.shape
filt_npy_embed_all.shape

with open(("drive/MyDrive/OrlyPred/Homomer_embeds/results/embeds_Jan_22/all_supervised_umap_embeds"), 'wb') as f:
    pickle.load(s_umap_embeds, f)

"""Supervised UMAP plot"""

# good separations on 50k embeds: 64 comp, 500 neighbors, 0.5 dist; 60,15,11; 14,59,60 (blue also); 20,49,59; 15,18,19; 15,18,20; 15,18,25

fig = plt.figure()
ax = fig.add_subplot(projection='3d')
ax.legend()

ax.scatter(
    s_umap_embeds[:, 0],
    s_umap_embeds[:, 1],
    s_umap_embeds[:, 2],
    
    # s_umap_embeds[:, 60],
    # s_umap_embeds[:, 33],
    # s_umap_embeds[:, 38],


    c=[c_palette[int(x)] for x in finalDf.nsub]
    )

    # c=[c_palette[int(x)] for x in k])

# import seaborn as sns

c_palette=sns.color_palette(n_colors=64)
c_palette[6]

print(tab_for_embed.groupby("nsub").size().count(), "- number of different oligomeric assemblies")
print(tab_for_embed.shape, "shape of conf_plus")
tab_for_embed.groupby("nsub").size().sort_values(ascending=False)

# [list(j) for i in itertools.combinations([1,2,3],2) for j in itertools.permutations(list(i)+[4])]
fig = plt.figure()
ax = fig.add_subplot(projection='3d')

for x in list(itertools.combinations(list(range(1, 64)),2)):
  ax.scatter(
    s_umap_embeds[:, x[0]],
    s_umap_embeds[:, 10],
    s_umap_embeds[:, 5],

    c=[c_palette[int(x)] for x in tab_test.nsub])
  plt.savefig(f"drive/MyDrive/OrlyPred/figs/3d_fig_{x[0]}_10_5.png")

ls drive/MyDrive/OrlyPred/figs

"""# New Section"""